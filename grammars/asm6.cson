# Syntax Highlighting for the asm6 assembler

scopeName: 'source.asm6'
name: 'ASM6 (6502)'      # Name shown in Atom Editor grammar selection
# File extensions associated with this grammar
fileTypes: [
  's'
]
patterns: [
  { include: 'source.65c02-opcodes' }   # extend with 6502X opcodes
  { include: 'source.6502x-opcodes' }   # extend with 6502X opcodes
  { include: '#comments' }  # comments
  { include: '#symbols' }   # symbols, constants, numbers
  { include: '#directives' } # cc65 assembler directives
]

# Repository starts here ------------------------------------------------------
repository:

  # comments
  comments:
    patterns: [
      # semicolon comments
      {
        match:  ';.*$'
        name:   'comment.line.semicolon.cc65-directives'
      }
    ]

  # symbols
  symbols:
    patterns: [
      # strings
      {
        begin: '[\"\']'
        beginCaptures:
          0:
            name: 'punctuation.definition.string.begin.cc65-directives'
        end: '[\"\']'
        endCaptures:
          0:
            name: 'punctuation.definition.string.end.cc65-directives'
        name: 'string.quoted.double.cc65-directives'
      }
      # absolut addressing/numbers
      {
        match: '\\#(\'.\'|[^\\s\']+)'
        name: 'constant.numeric.hex.cc65-directives'
      }
      # hex, prefixed with dollar sign($)
      {
        match: '-?\\$\\b[a-fA-F0-9]+\\b'
        name: 'constant.numeric.hex.cc65-directives'
      }
      # hex, suffixed with h(h)
      {
        match: '-?\\b([a-fA-F0-9]+)h\\b'
        name: 'constant.numeric.hex.cc65-directives'
      }
      # binary prefixed with %
      {
        match: '%[01]+'
        name: 'constant.numeric.binary.cc65-directives'
      }
      # binary suffixed with b
      {
        match: '[01]+[bB]'
        name: 'constant.numeric.binary.cc65-directives'
      }
      # decimal
      {
        match: '\\b([0-9]+)\\b'
        name: 'constant.numeric.decimal.cc65-directives'
      }
    ]

  # assembler directives
  directives:
    patterns: [
      # ca65 pseudo variables
      {
        match:  '(\\.)?\\b(?i:equ|include|incsrc|incbin|db|dw|byte|word|dcb|dcw|dc\\.b|dc\\.w)\\b'
        name:   'support.function.pseudo.cc65-directives'
      }
      # ca65 pseudo functions
      {
        match:  '(\\.)?\\b(?i:dl|dh|hex|dsb|dsw|pad|org|align|fillvalue|base|if|elseif|else|endif|ifdef|ifndef|macro|endm|rept|endr|enum|ende|error)\\b'
        name:   'support.function.pseudo.cc65-directives'
      }
      # # CPU constants
      # {
      #   match:  '\\b(CPU_6502|CPU_65SC02|CPU_65C02|CPU_65816|CPU_SWEET16|CPU_HUC6280|CPU_ISET_6502|CPU_ISET_65SC02|CPU_ISET_65C02|CPU_ISET_65816|CPU_ISET_SWEET16|CPU_ISET_HUC6280|__APPLE2__|__APPLE2ENH__|__ATARI__|__ATARIXL__|__ATMOS__|__BBC__|__C128__|__C16__|__C64__|__CBM__|__CBM510__|__CBM610__|__GEOS__|__GEOS_APPLE__|__GEOS_CBM__|__LUNIX__|__LYNX__|__NES__|__PET__|__PLUS4__|__SIM6502__|__SIM65C02__|__SUPERVISION__|__VIC20__|VER_MAJOR|VER_MINOR)\\b'
      #   name:   'constant.language.cc65-directives'
      # }
      # address sizes, macpack packages
      # {
      #   match:  '\\b(?i:direct|zeropage|zp|absolute|abs|near|far|long|dword|atari|cbm|cpu|generic|longbranch)\\b'
      #   name:   'constant.language.cc65-directives'
      # }
      # Operators
      {
        match:  '!|&|&&|\\^|\\*|\\/|\\-|\\+|~|=|<=|>=|<<|>>|<>|<|>|\\||\\|\\|'
        name:   'keyword.operator.cc65-directives'
      }
      # Operators II
      {
        match:  '(\\.)\\b(?i:and|(bit)?(and|not|or|xor)|mod|shl|shr)\\b'
        name:   'keyword.operator.cc65-directives'
      }
    ]
